import subprocess
import os

input_fastq_r1 = input("Type name of fastq for r1")  # forward sequence
# input_fastq_r2 = input("Type name of fastq for r2")  # reverse sequence
# sample_fastq_r1 = input_fastq_r1.split(".")[0]  # sample name created for forward sequences
# sample_fastq_r2 = input_fastq_r2.split(".")[0]  # sample name created for reverse sequences
# trimmed_fastq_r1 = sample_fastq_r1 + input("add file name for trimmed r1")  # trimmed file name created for
# # forward sequences
# trimmed_fastq_r2 = sample_fastq_r2 + input("add file name for trimmed r2")  # trimmed file name created for
# # reverse sequences
base_name = os.path.basename(input_fastq_r1.split(".")[0])  # base name
# fastq_skesa = base_name + input("add file name for assembled genome")  # output file for skesa command
fastq_sam = base_name + input("add .sam to create a sam file")  # sam file generated by mapping f and r sequences back
# to reference genome
fastq_bam = base_name + input("add .bam to create a bam file") # sam file to be converted into a bam file
fastq_qualimap = base_name + input("add file name for final qc report")  # final qc folder generated by qualimap


# Trimming Function:
#    Responsible for removing adapter sequences, filtering by quality, and read pruning
def fastp(r1, r2, t_r1, t_r2):
    fastp_cmd = ["fastp",
                 "--thread", "3",
                 "-i", "{}".format(r1),
                 "-I", "{}".format(r2),
                 "-o", t_r1,
                 "-O", t_r2]
    return subprocess.run(fastp_cmd)


# Genome Assembly Function:
#    Assembles the genome use the trimmed forward and reverse sequences
def skesa(t_r1, t_r2, sk):
    skesa_cmd = ["skesa",
                 "--fastq", "{},{}".format(t_r1, t_r2),
                 "--contigs_out", sk,
                 "--cores", "2"]
    return subprocess.run(skesa_cmd)


# Genome indexing Function
#    Indexes the genome making it easier to find sequences of interest, mismatches, indels etc
def bwa_index(sk):
    bwaindex_cmd = ["bwa", "index", sk]
    return subprocess.run(bwaindex_cmd)


# Function for generating a sam file
#    Maps the reads back to the reference genome to generate the sam file
def bwamem(sk, r1, r2, sam):
    bwamem_cmd = ["bwa",
                  "mem",
                  "-t", "3"
                  "-M", sk, "{}".format(r1), "{}".format(r2),
                  "-o", sam]
    return subprocess.run(bwamem_cmd)


# Function for converting a sam file into a bam file
def samtool(sam, bam):
    samtools_cmd = ["samtools",
                    "sort", sam,
                    "-o", bam,
                    "-@", "3"]
    return subprocess.run(samtools_cmd, stdout=subprocess.PIPE)


# Performs a qc check on the genome assembly
def qualimap(bam, qm):
    qualimap_cmd = ["qualimap",
                    "bamqc",
                    "-bam", bam,
                    "-outfile", qm,
                    "-nt", "3"]
    return subprocess.run(qualimap_cmd)


# Report and File generator
def file_G():
    # a = fastp(input_fastq_r1, input_fastq_r2, trimmed_fastq_r1, trimmed_fastq_r2)
    # b = skesa(trimmed_fastq_r1, trimmed_fastq_r2, fastq_skesa)
    # c = bwa_index(fastq_skesa)
    # d = bwamem(fastq_skesa, input_fastq_r1, input_fastq_r2, fastq_sam)
    e = samtool(fastq_sam, fastq_bam)
    f = qualimap(fastq_bam, fastq_qualimap)
    return e, f


file_G()
