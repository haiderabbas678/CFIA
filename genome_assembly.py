import subprocess
import os

input_fastq_r1 = "ERR4627396.sra_1.fastq"  # forward sequence
input_fastq_r2 = "ERR4627396.sra_2.fastq"  # reverse sequence
sample_fastq_r1 = input_fastq_r1.split(".")[0]  # sample name created for forward sequences
sample_fastq_r2 = input_fastq_r2.split(".")[0]  # sample name created for reverse sequences
trimmed_fastq_r1 = sample_fastq_r1 + "_trimmed_R1.fastq"  # trimmed file name created for forward sequences
trimmed_fastq_r2 = sample_fastq_r2 + "_trimmed_R2.fastq"  # trimmed file name created for reverse sequences
base_name = os.path.basename(input_fastq_r1.split(".")[0]) # base name
fastq_skesa = base_name + "_skesa.fa" # output file for skesa command
fastq_sam = base_name + ".sam" # sam file generated by mapping f and r sequences back to reference genome
fastq_bam = base_name + ".bam" # sam file to be converted into a bam file
fastq_qualimap = base_name + "_qualimap" # final qc folder generated by qualimap


# Trimming Command:
#    Responsible for removing adapter sequences, filtering by quality, and read pruning
fastp_cmd = ["fastp",
             "-i", "{}".format(input_fastq_r1),
             "-I", "{}".format(input_fastq_r2),
             "-o", trimmed_fastq_r1,
             "-O", trimmed_fastq_r2]

# Executes the above command
fastp = subprocess.run(fastp_cmd)


# Genome Assembly Command:
#    Assembles the genome use the trimmed forward and reverse sequences
skesa_cmd = ["skesa",
             "--fastq", "{},{}".format(trimmed_fastq_r1, trimmed_fastq_r2),
             "--contigs_out", fastq_skesa]

# Executes the above command
skesa = subprocess.run(skesa_cmd)


# Genome indexing
#    Indexes the genome making it easier to find sequences of interest, mismatches, indels etc
bwaindex_cmd = ["bwa", "index", fastq_skesa]

# Executes above command
bwa_index = subprocess.run(bwaindex_cmd)


# Generating a sam file from a fastq file
#    Maps the reads back to the reference genome to generate the sam file
bwamem_cmd = ["bwa",
              "mem",
              "-M",
              fastq_skesa, "{}".format(input_fastq_r1), "{}".format(input_fastq_r2),
              "-o", fastq_sam]

# Executes the above command
bwamem = subprocess.run(bwamem_cmd)


# Converts the sam file into a bam file as qualimap requires bam files as an input
samtools_cmd = ["samtools", 'sort', fastq_sam, "-o", fastq_bam]

# Executes the above command
samtools = subprocess.run(samtools_cmd)


# Performs a qc check on the assembles genome
qualimap_cmd = ["qualimap", "bamqc", "-bam", fastq_bam, "-outfile", fastq_qualimap]

# Executes the above command
qualimap = subprocess.run(qualimap_cmd)
